<?php

namespace CourseBundle\Controller;

use Symfony\Component\HttpFoundation\Request;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use CourseBundle\Entity\Course;
use CourseBundle\Form\CourseType;
use FOS\RestBundle\Controller\FOSRestController;
use FOS\RestBundle\Controller\Annotations as Rest;
use Nelmio\ApiDocBundle\Annotation as Doc;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\ParamConverter;

/**
 * Course controller.
 *
 * @Route("/user")
 */
class UserController extends FOSRestController
{
    /**
     * Lists all Course entities.
     *
     * @Rest\Get("/", name="app_api_users")
     *
     * @Rest\QueryParam(
     *     name="firstname",
     *     requirements="[a-zA-Z0-9]+",
     *     nullable=false,
     *     description="User first name."
     * )
     * @Rest\QueryParam(
     *     name="lastname",
     *     requirements="[a-zA-Z0-9]+",
     *     nullable=false,
     *     description="User last name."
     * )
     * @Rest\QueryParam(
     *     name="gender",
     *     requirements="[a-zA-Z0-9]+",
     *     nullable=false,
     *     description="User gender."
     * )
     *
     * @Doc\ApiDoc(
     *     section="Courses",
     *     resource=true,
     *     description="Get all courses",
     *     statusCodes={
     *          200="Returned when successful",
     *     }
     * )
     *
     * @Method("GET")
     */
    public function indexAction()
    {
        $em = $this->getDoctrine()->getManager();

        /*$courses = $em->getRepository('UserBundle:User')->findAll();

        return $this->render('course/index.html.twig', array(
            'courses' => $courses,
        ));*/
        return $em->getRepository('CourseBundle:Course')->findAll();
    }


    /**
     * Creates a new user entity.
     *
     * @Rest\Post("/", name="app_api_new_user")
     *
     * @ParamConverter("user", converter="fos_rest.request_body")
     *
     * @Rest\View(statusCode=201)
     *
     * @Doc\ApiDoc(
     *      section="Users",
     *      description="Create a new user.",
     *      statusCodes={
     *          201="Returned if user has been successfully created",
     *          400="Returned if errors",
     *          500="Returned if server error"
     *      }
     * )
     *
     * @Method("POST")
     */
    public function newAction(Request $request)
    {
        /*$course = new Course();
        $form = $this->createForm('CourseBundle\Form\CourseType', $course);
        $form->handleRequest($request);
        */
        //if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $em->persist($user);
            $em->flush();

            //return $this->redirectToRoute('course_show', array('id' => $course->getId()));
            return $this->view(null, 201,
                [
                'Location' => $this->generateUrl('app_api_category', [ 'id' => $category->getId()]),
            ]);
        /*}

        return $this->render('course/new.html.twig', array(
            'course' => $course,
            'form' => $form->createView(),
        ));*/
    }

    /**
     * Finds and displays a Course entity.
     *
     * @Rest\Get("/{id}", name="app_api_course", requirements={"id"="\d+"})
     *
     * @Doc\ApiDoc(
     *     section="Courses",
     *     resource=true,
     *     description="Get course by id",
     *     requirements={
     *          {
     *              "name"="id",
     *              "dataType"="integer",
     *              "requirement"="\d+",
     *              "description"="The course unique identifier."
     *          }
     *      },
     *     statusCodes={
     *          200="Returned when successful",
     *     }
     * )
     * @Method("GET")
     */
    public function showAction(Course $course)
    {
        /*$deleteForm = $this->createDeleteForm($course);

        return $this->render('course/show.html.twig', array(
            'course' => $course,
            'delete_form' => $deleteForm->createView(),
        ));*/
        return $course;
    }


    /**
     * Displays a form to edit an existing Course entity.
     *
     * @Rest\Put(
     *     path = "/{id}",
     *     name = " app_api_edit_course",
     *     requirements = {"id"="\d+"}
     * )
     *
     * @ParamConverter("apiCategory", converter="fos_rest.request_body")
     * 
     * @Doc\ApiDoc(
     *      section="Courses",
     *      description="Edit an existing course.",
     *      statusCodes={
     *          201="Returned if course has been successfully edited",
     *          400="Returned if errors",
     *          500="Returned if server error"
     *      },
     *      requirements={
     *          {
     *              "name"="id",
     *              "dataType"="integer",
     *              "requirement"="\d+",
     *              "description"="The course unique identifier."
     *          }
     *      },
     * )
     * @Method("PUT")
     */
    public function editAction(Request $request, Course $course)
    {
        /*$deleteForm = $this->createDeleteForm($course);
        $editForm = $this->createForm('CourseBundle\Form\CourseType', $course);
        $editForm->handleRequest($request);
        */
        //if ($editForm->isSubmitted() && $editForm->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $em->persist($course);
            $em->flush();

            return $this->view('', Response::HTTP_NO_CONTENT);
            //return $this->redirectToRoute('course_edit', array('id' => $course->getId()));
        /*}

        return $this->render('course/edit.html.twig', array(
            'course' => $course,
            'edit_form' => $editForm->createView(),
            'delete_form' => $deleteForm->createView(),
        ));*/
    }

    /**
     * Deletes a Course entity.
     *
     * @Rest\Delete(
     *     path = "/{id}",
     *     name = "app_api_delete_course",
     *     requirements = {"id"="\d+"}
     * )
     * 
     * @Rest\View(statusCode=204)
     *
     * @Doc\ApiDoc(
     *      section="Courses",
     *      description="Delete an existing course.",
     *      statusCodes={
     *          201="Returned if course has been successfully deleted",
     *          400="Returned if course does not exist",
     *          500="Returned if server error"
     *      },
     *      requirements={
     *          {
     *              "name"="id",
     *              "dataType"="integer",
     *              "requirement"="\d+",
     *              "description"="The course unique identifier."
     *          }
     *      },
     * )
     * @Method("DELETE")
     */
    public function deleteAction(Request $request, Course $course)
    {
       // $form = $this->createDeleteForm($course);
       // $form->handleRequest($request);

        //if ($form->isSubmitted() && $form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $em->remove($course);
            $em->flush();
        //}

        //return $this->redirectToRoute('course_index');
        return $this->view('', Response::HTTP_NO_CONTENT);
    }

    /**
     * Creates a form to delete a Course entity.
     *
     * @param Course $course The Course entity
     *
     * @return \Symfony\Component\Form\Form The form
     */
    private function createDeleteForm(Course $course)
    {
        return $this->createFormBuilder()
            ->setAction($this->generateUrl('course_delete', array('id' => $course->getId())))
            ->setMethod('DELETE')
            ->getForm()
        ;
    }
}
